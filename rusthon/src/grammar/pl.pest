WHITESPACE   = _{ " " | "\t" | NEWLINE }
NEWLINE      = _{ "\n" | "\r\n" }
SOI_WHITESPACE = _{ " " | "\t" }
INDENT        = _{ SOI_WHITESPACE* }

code         = { SOI ~ statement* ~ EOI }
statement    = { assigment_math | assignment | print | printf | if_all | statement_if }

if_all       = { INDENT ~ "if" ~ "(" ~ statement_if ~ ")" ~ "{" ~ NEWLINE* ~ statement* ~ NEWLINE* ~ "}" }
statement_if = { INDENT ~ ident ~ "===" ~ expr | math_expr }
assigment_math = { INDENT ~ ident ~ "==" ~ math_expr }
assignment   = { INDENT ~ident ~ "=" ~ expr }
print        = { INDENT ~"print" ~ "(" ~ expr ~ ")" }
printf       = { INDENT ~"print" ~ "(" ~ format_string ~ ")" }

input_call   = { input ~ "(" ~ string ~ ")" }
input        = { "input" }

format_string = { "f\"" ~ (format_part)* ~ "\"" }
format_part   = { interpolation | raw_text }
interpolation = { "{" ~ expr ~ "}" }
raw_text     = @{ (!("{" | "\"") ~ ANY)+ }

ident        = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

math_expr = _{ math_stmt }
math_stmt = { mul_div ~ (add_op ~ mul_div)* }
mul_div = { atom ~ (mul_op ~ atom)* }
add_op    = { "+" | "-" }
mul_op    = { "*" | "/" }
atom = { number | ident | "(" ~ math_expr ~ ")" }
expr         = _{ input_call | string | number | ident | bool }

bool         = @{ "true" | "false" }
string       = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number       = @{ ASCII_DIGIT+ }
